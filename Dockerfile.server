# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# Simplified Dockerfile for sigul server using dedicated build scripts
FROM registry.access.redhat.com/ubi9/ubi-minimal:latest

LABEL maintainer="releng@linuxfoundation.org"
LABEL org.opencontainers.image.title="Sigul Server"
LABEL org.opencontainers.image.description="Simplified Linux Foundation signing infrastructure server"
LABEL org.opencontainers.image.source="https://github.com/lfreleng-actions/sigul-sign-docker"

# Install package managers and required dependencies
RUN microdnf install -y dnf && \
    microdnf clean all

# Setup repositories using dedicated script for better reliability
COPY build-scripts/setup-repositories.sh /tmp/setup-repositories.sh
RUN chmod +x /tmp/setup-repositories.sh && \
    /tmp/setup-repositories.sh --test && \
    rm /tmp/setup-repositories.sh

# Install base dependencies available in UBI 9 repositories
RUN dnf update -y && \
    dnf install -y --setopt=install_weak_deps=False \
        git which tar xz \
        python3-devel python3-pip python3-setuptools python3-cryptography \
        python3-requests python3-six python3-pexpect \
        sqlite \
        nss-tools nmap-ncat \
        hostname iproute net-tools \
        make gcc autoconf automake libtool \
        procps-ng util-linux bind-utils \
        strace lsof \
        vim-minimal less findutils grep \
        wget rsync && \
    dnf clean all

# Install EPEL-dependent packages and Python packages via pip
RUN dnf install -y --setopt=install_weak_deps=False \
        python3-nss rpm-head-signing gnupg2 && \
    pip3 install SQLAlchemy==1.3.24 && \
    dnf clean all

# Copy and run installation script
COPY build-scripts/install-sigul.sh /tmp/install-sigul.sh
RUN chmod +x /tmp/install-sigul.sh && \
    /tmp/install-sigul.sh --verify server && \
    rm /tmp/install-sigul.sh

# Copy unified initialization script
COPY scripts/sigul-init.sh /usr/local/bin/sigul-init.sh
RUN chmod +x /usr/local/bin/sigul-init.sh

# Copy shared PKI files for certificate generation (permissions set later after user creation)
COPY pki/ /workspace/pki/

# Create sigul user and directories with consistent UID 1000 and GID 1000
# Handle both RPM-created users (x86_64) and manual creation (ARM64)
RUN if getent passwd sigul >/dev/null; then \
        # User exists, remove it and recreate with consistent UID/GID
        existing_uid=$(id -u sigul); \
        existing_gid=$(id -g sigul); \
        echo "Existing sigul user has UID $existing_uid, GID $existing_gid, recreating with UID/GID 1000"; \
        userdel sigul 2>/dev/null || true; \
        groupdel sigul 2>/dev/null || true; \
    fi && \
    # Create group first with GID 1000
    groupadd -g 1000 sigul && \
    # Create user with UID 1000 and GID 1000
    useradd -r -u 1000 -g 1000 -d /var/sigul -s /bin/bash sigul && \
    # Create unified sigul directory structure under /var/sigul
    mkdir -p /var/sigul && \
    chown sigul:sigul /var/sigul && \
    chmod 755 /var/sigul && \
    # Set proper permissions on PKI files after user creation
    # Only chmod files that exist (some are generated at runtime)
    if ls /workspace/pki/*.crt >/dev/null 2>&1; then chmod 644 /workspace/pki/*.crt; fi && \
    chmod 644 /workspace/pki/*.conf && \
    if ls /workspace/pki/*-key.pem >/dev/null 2>&1; then chmod 644 /workspace/pki/*-key.pem; fi && \
    chmod +x /workspace/pki/*.sh && \
    chown -R sigul:sigul /workspace/pki/

# Set working directory
WORKDIR /var/sigul

# Switch to sigul user
USER sigul

# Default command - initialize and start service
CMD ["/usr/local/bin/sigul-init.sh", "--role", "server", "--start-service"]

# Health check - verify process only (server connects to bridge, doesn't listen)
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD test -f /var/sigul/pids/sigul_server.pid && pgrep -f server >/dev/null || exit 1

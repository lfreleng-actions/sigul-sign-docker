# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# Unified Dockerfile for sigul client using the new sigul-init.sh approach
FROM registry.access.redhat.com/ubi9/ubi-minimal:latest

LABEL maintainer="releng@linuxfoundation.org"
LABEL org.opencontainers.image.title="Sigul Client"
LABEL org.opencontainers.image.description="Unified Linux Foundation signing infrastructure client"
LABEL org.opencontainers.image.source="https://github.com/lfreleng-actions/sigul-sign-docker"

# Install package managers and required dependencies
RUN microdnf install -y dnf && \
    microdnf clean all

# Setup repositories using dedicated script for better reliability
COPY build-scripts/setup-repositories.sh /tmp/setup-repositories.sh
RUN chmod +x /tmp/setup-repositories.sh && \
    /tmp/setup-repositories.sh --test && \
    rm /tmp/setup-repositories.sh

# Install base dependencies for all architectures
RUN dnf install -y --setopt=install_weak_deps=False --allowerasing \
        git which curl tar gzip xz \
        python3-devel python3-pip python3-koji python3-nss python3-requests \
        python3-rpm python3-setuptools python3-cryptography python3-pexpect python3-gpg \
        gnupg2 koji-utils expect \
        make gcc autoconf automake libtool \
        procps-ng util-linux bind-utils \
        strace lsof \
        vim-minimal less findutils grep \
        curl wget rsync nmap-ncat \
        hostname iproute net-tools \
        sqlite nss-tools jq && \
    dnf clean all

# Copy and run installation script
COPY build-scripts/install-sigul.sh /tmp/install-sigul.sh
RUN chmod +x /tmp/install-sigul.sh && \
    /tmp/install-sigul.sh --verify client && \
    rm /tmp/install-sigul.sh

# Copy unified initialization script
COPY scripts/sigul-init.sh /usr/local/bin/sigul-init.sh
RUN chmod +x /usr/local/bin/sigul-init.sh

# Copy shared PKI files for certificate generation (permissions set later after user creation)
COPY pki/ /workspace/pki/

# Copy signing entrypoint script for backward compatibility
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Create sigul user and directories with consistent UID 1000 and GID 1000
# Handle both RPM-created users (x86_64) and manual creation (ARM64)
RUN if getent passwd sigul >/dev/null; then \
        # User exists, remove it and recreate with consistent UID/GID
        existing_uid=$(id -u sigul); \
        existing_gid=$(id -g sigul); \
        echo "Existing sigul user has UID $existing_uid, GID $existing_gid, recreating with UID/GID 1000"; \
        userdel sigul 2>/dev/null || true; \
        groupdel sigul 2>/dev/null || true; \
    fi && \
    # Create group first with GID 1000
    groupadd -g 1000 sigul && \
    # Create user with UID 1000 and GID 1000
    useradd -r -u 1000 -g 1000 -d /var/sigul -s /bin/bash sigul && \
    # Create unified sigul directory structure under /var/sigul
    mkdir -p /var/sigul && \
    chown sigul:sigul /var/sigul && \
    chmod 755 /var/sigul && \
    # Set proper permissions on PKI files after user creation
    # Only chmod files that exist (some are generated at runtime)
    if ls /workspace/pki/*.crt >/dev/null 2>&1; then chmod 644 /workspace/pki/*.crt; fi && \
    chmod 644 /workspace/pki/*.conf && \
    if ls /workspace/pki/*-key.pem >/dev/null 2>&1; then chmod 644 /workspace/pki/*-key.pem; fi && \
    chmod +x /workspace/pki/*.sh && \
    chown -R sigul:sigul /workspace/pki/

# Create a wrapper script that can handle both initialization and signing
RUN cat > /usr/local/bin/client-wrapper.sh << 'EOF'
#!/bin/bash
# Unified client wrapper script for sigul user (UID/GID 1000)
# Handles both sigul initialization and signing operations

set -euo pipefail

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] CLIENT-WRAPPER: $1" >&2
}

# Ensure we're running as the sigul user consistently
if [[ "$(id -u)" != "1000" ]]; then
    log "Warning: Running as UID $(id -u) instead of expected UID 1000 (sigul user)"
fi

# Check if this is a signing operation (legacy entrypoint.sh behavior)
if [[ -n "${SIGN_TYPE:-}" || -n "${SIGN_OBJECT:-}" ]]; then
    log "Detected signing operation - using entrypoint.sh"
    exec /usr/local/bin/entrypoint.sh "$@"
fi

# Check if this is sigul client initialization
if [[ "${1:-}" == "--role" && "${2:-}" == "client" ]] || [[ "${SIGUL_ROLE:-}" == "client" ]]; then
    log "Detected client initialization - using sigul-init.sh"
    exec /usr/local/bin/sigul-init.sh "$@"
fi

# If specific command provided, run it directly
if [[ $# -gt 0 && "${1:-}" != "--role" ]]; then
    log "Running command directly: $*"
    exec "$@"
fi

# Default: run sigul-init.sh for client setup
log "Default mode - initializing sigul client"
export SIGUL_ROLE=client
exec /usr/local/bin/sigul-init.sh --role client "$@"
EOF

# Make the wrapper script executable
RUN chmod +x /usr/local/bin/client-wrapper.sh

# Set working directory to unified structure
WORKDIR /var/sigul

# Switch to sigul user (same as server and bridge)
USER sigul

# Use the wrapper script as the default command
CMD ["/usr/local/bin/client-wrapper.sh"]

# Health check - verify client configuration is ready
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD test -f /var/sigul/config/client.conf && test -d /var/sigul/nss/client || exit 1

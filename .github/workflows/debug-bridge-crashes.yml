---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

name: Debug Bridge Crashes

on:
  workflow_dispatch:
    inputs:
      monitor_duration:
        description: 'How long to monitor for crashes (seconds)'
        required: false
        default: '600'
        type: string
      architecture:
        description: 'Architecture to test'
        required: false
        default: 'amd64'
        type: choice
        options:
          - amd64
          - arm64
          - both
      debug_level:
        description: 'Debug verbosity level'
        required: false
        default: 'normal'
        type: choice
        options:
          - minimal
          - normal
          - verbose
          - maximum
  schedule:
    # Run daily at 2 AM UTC to catch intermittent issues
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  DEBUG: true

jobs:
  debug-bridge-crashes-amd64:
    if: ${{ github.event.inputs.architecture == 'amd64' || github.event.inputs.architecture == 'both' || github.event.inputs.architecture == '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build AMD64 Images
        run: |
          echo "::group::Building AMD64 images"

          # Build server image
          docker build \
            --file Dockerfile.server \
            --tag server-linux-amd64-image:test \
            --build-arg TARGETARCH=amd64 \
            --load \
            .

          # Build bridge image
          docker build \
            --file Dockerfile.bridge \
            --tag bridge-linux-amd64-image:test \
            --build-arg TARGETARCH=amd64 \
            --load \
            .

          # Build client image
          docker build \
            --file Dockerfile.client \
            --tag client-linux-amd64-image:test \
            --build-arg TARGETARCH=amd64 \
            --load \
            .

          echo "::endgroup::"

      - name: Prepare Environment
        run: |
          echo "::group::Setting up environment"

          # Set environment variables
          echo "SIGUL_SERVER_IMAGE=server-linux-amd64-image:test" >> $GITHUB_ENV
          echo "SIGUL_BRIDGE_IMAGE=bridge-linux-amd64-image:test" >> $GITHUB_ENV
          echo "SIGUL_CLIENT_IMAGE=client-linux-amd64-image:test" >> $GITHUB_ENV
          echo "NSS_PASSWORD=debug_password_$(date +%s)" >> $GITHUB_ENV
          echo "SIGUL_ADMIN_PASSWORD=debug_admin_$(date +%s)" >> $GITHUB_ENV

          # Create workspace directories
          mkdir -p crash-diagnostics
          chmod 755 crash-diagnostics

          # Make debug scripts executable
          chmod +x debug/*.sh

          echo "::endgroup::"

      - name: Start Infrastructure
        id: start_infrastructure
        run: |
          echo "::group::Starting Sigul infrastructure"

          # Start the infrastructure
          docker compose -f docker-compose.sigul.yml up -d sigul-server sigul-bridge

          # Wait for initial startup
          echo "Waiting for initial container startup..."
          sleep 20

          # Check initial status
          echo "Initial container status:"
          docker ps -a --filter "name=sigul"

          # Check for immediate failures
          SERVER_STATUS=$(timeout 10 docker inspect --format='{{.State.Status}}' sigul-server 2>/dev/null || echo "not_found")
          BRIDGE_STATUS=$(timeout 10 docker inspect --format='{{.State.Status}}' sigul-bridge 2>/dev/null || echo "not_found")

          echo "Server status: $SERVER_STATUS"
          echo "Bridge status: $BRIDGE_STATUS"

          if [[ "$SERVER_STATUS" != "running" ]] || [[ "$BRIDGE_STATUS" != "running" ]]; then
            echo "‚ùå Containers failed to start properly"
            echo "Server logs:"
            timeout 30 docker logs sigul-server --tail 50 || true
            echo "Bridge logs:"
            timeout 30 docker logs sigul-bridge --tail 50 || true
            exit 1
          fi

          echo "‚úÖ Infrastructure started successfully"
          echo "::endgroup::"

      - name: Run Crash Diagnostics
        id: crash_diagnostics
        run: |
          echo "::group::Running comprehensive crash diagnostics"

          # Determine monitor duration
          MONITOR_DURATION="${{ github.event.inputs.monitor_duration || '600' }}"
          DEBUG_LEVEL="${{ github.event.inputs.debug_level || 'normal' }}"

          echo "Monitor duration: ${MONITOR_DURATION} seconds"
          echo "Debug level: ${DEBUG_LEVEL}"

          # Set debug flags based on level
          DEBUG_FLAGS="--github-actions"
          case "$DEBUG_LEVEL" in
            "verbose"|"maximum")
              DEBUG_FLAGS="$DEBUG_FLAGS --verbose"
              ;;
          esac

          # Run the crash diagnostics capture
          set +e  # Don't exit on failure - we want to capture diagnostics even if crashes occur
          ./debug/capture-crash-diagnostics.sh \
            --monitor-duration "$MONITOR_DURATION" \
            --capture-interval 3 \
            --output-dir "./crash-diagnostics" \
            $DEBUG_FLAGS

          DIAGNOSTICS_EXIT_CODE=$?
          set -e

          echo "Diagnostics exit code: $DIAGNOSTICS_EXIT_CODE"
          echo "diagnostics_exit_code=$DIAGNOSTICS_EXIT_CODE" >> $GITHUB_OUTPUT

          # Always show final container status
          echo "Final container status:"
          docker ps -a --filter "name=sigul" || true

          # Check for restart counts
          SERVER_RESTARTS=$(timeout 10 docker inspect --format='{{.RestartCount}}' sigul-server 2>/dev/null || echo "unknown")
          BRIDGE_RESTARTS=$(timeout 10 docker inspect --format='{{.RestartCount}}' sigul-bridge 2>/dev/null || echo "unknown")

          echo "Final restart counts:"
          echo "Server: $SERVER_RESTARTS"
          echo "Bridge: $BRIDGE_RESTARTS"

          echo "server_restarts=$SERVER_RESTARTS" >> $GITHUB_OUTPUT
          echo "bridge_restarts=$BRIDGE_RESTARTS" >> $GITHUB_OUTPUT

          if [[ "$DIAGNOSTICS_EXIT_CODE" -eq 0 ]]; then
            echo "‚úÖ No crashes detected during monitoring"
          else
            echo "üö® Crashes detected during monitoring"
          fi

          echo "::endgroup::"

      - name: Capture Final Logs
        if: always()
        run: |
          echo "::group::Capturing final container logs"

          # Create final logs directory
          mkdir -p crash-diagnostics/final-logs

          # Capture final logs from all containers
          for container in sigul-server sigul-bridge; do
            if timeout 10 docker ps -a --filter "name=$container" | grep -q "$container"; then
              echo "Capturing final logs for $container..."
              timeout 60 docker logs "$container" > "crash-diagnostics/final-logs/${container}_final.log" 2>&1 || echo "Failed to capture logs for $container" > "crash-diagnostics/final-logs/${container}_final.log"

              # Also capture container inspect
              timeout 15 docker inspect "$container" > "crash-diagnostics/final-logs/${container}_final_inspect.json" 2>/dev/null || echo "Failed to inspect $container" > "crash-diagnostics/final-logs/${container}_final_inspect.json"
            fi
          done

          # Capture Docker events
          timeout 30 docker events --since "1h" --until "now" --filter "container=sigul-server" --filter "container=sigul-bridge" > "crash-diagnostics/final-logs/docker_events.log" 2>/dev/null || echo "Failed to capture Docker events" > "crash-diagnostics/final-logs/docker_events.log"

          # Capture system information
          {
            echo "=== FINAL SYSTEM STATE ==="
            echo "Timestamp: $(date -Iseconds)"
            echo "Uptime: $(uptime)"
            echo "Load: $(cat /proc/loadavg)"
            echo "Memory: $(free -h)"
            echo "Disk: $(df -h)"
            echo ""
            echo "=== DOCKER SYSTEM ==="
            docker system df
            echo ""
            echo "=== FINAL CONTAINER STATUS ==="
            timeout 15 docker ps -a --filter "name=sigul"
          } > "crash-diagnostics/final-logs/system_state.log"

          echo "::endgroup::"

      - name: Cleanup Infrastructure
        if: always()
        run: |
          echo "::group::Cleaning up infrastructure"

          # Stop containers
          docker compose -f docker-compose.sigul.yml down --remove-orphans || true

          # Remove containers if they still exist
          docker rm -f sigul-server sigul-bridge sigul-client-test 2>/dev/null || true

          echo "Infrastructure cleanup completed"
          echo "::endgroup::"

      - name: Create Summary Report
        if: always()
        run: |
          echo "::group::Creating summary report"

          # Create a summary for GitHub Actions
          CRASH_EVENTS=$(find crash-diagnostics/crash-events -name "crash_*" -type d 2>/dev/null | wc -l || echo "0")
          SERVER_RESTARTS="${{ steps.crash_diagnostics.outputs.server_restarts || 'unknown' }}"
          BRIDGE_RESTARTS="${{ steps.crash_diagnostics.outputs.bridge_restarts || 'unknown' }}"
          DIAGNOSTICS_EXIT_CODE="${{ steps.crash_diagnostics.outputs.diagnostics_exit_code || 'unknown' }}"

          {
            echo "# üîç Sigul Bridge Crash Diagnostics Report (AMD64)"
            echo ""
            echo "**Workflow:** ${{ github.workflow }}"
            echo "**Run ID:** ${{ github.run_id }}"
            echo "**Architecture:** AMD64"
            echo "**Monitor Duration:** ${{ github.event.inputs.monitor_duration || '600' }} seconds"
            echo "**Debug Level:** ${{ github.event.inputs.debug_level || 'normal' }}"
            echo ""
            echo "## Results"
            echo ""
            echo "- **Crash Events Detected:** $CRASH_EVENTS"
            echo "- **Server Restarts:** $SERVER_RESTARTS"
            echo "- **Bridge Restarts:** $BRIDGE_RESTARTS"
            echo "- **Diagnostics Exit Code:** $DIAGNOSTICS_EXIT_CODE"
            echo ""

            if [[ "$CRASH_EVENTS" -gt 0 ]] || [[ "$BRIDGE_RESTARTS" != "0" ]] && [[ "$BRIDGE_RESTARTS" != "unknown" ]]; then
              echo "## ‚ö†Ô∏è Issues Detected"
              echo ""
              echo "Bridge restart/crash issues were detected during this run."
              echo "Check the uploaded diagnostics artifact for detailed analysis."
              echo ""
              if [[ "$CRASH_EVENTS" -gt 0 ]]; then
                echo "- **$CRASH_EVENTS crash events** captured with full diagnostics"
              fi
              if [[ "$BRIDGE_RESTARTS" != "0" ]] && [[ "$BRIDGE_RESTARTS" != "unknown" ]]; then
                echo "- **$BRIDGE_RESTARTS bridge restarts** detected"
              fi
            else
              echo "## ‚úÖ No Issues Detected"
              echo ""
              echo "No crashes or restart issues were detected during the monitoring period."
              echo "The bridge daemon appears to be stable on AMD64."
            fi

            echo ""
            echo "## Artifacts"
            echo ""
            echo "- **crash-diagnostics-amd64:** Complete diagnostic data including logs, configurations, and crash reports"

          } >> $GITHUB_STEP_SUMMARY

          echo "::endgroup::"

      - name: Upload Crash Diagnostics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: crash-diagnostics-amd64
          path: crash-diagnostics/
          retention-days: 7
          compression-level: 6

  debug-bridge-crashes-arm64:
    if: ${{ github.event.inputs.architecture == 'arm64' || github.event.inputs.architecture == 'both' }}
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build ARM64 Images
        run: |
          echo "::group::Building ARM64 images"

          # Build server image
          docker build \
            --platform linux/arm64 \
            --file Dockerfile.server \
            --tag server-linux-arm64-image:test \
            --build-arg TARGETARCH=arm64 \
            --load \
            .

          # Build bridge image
          docker build \
            --platform linux/arm64 \
            --file Dockerfile.bridge \
            --tag bridge-linux-arm64-image:test \
            --build-arg TARGETARCH=arm64 \
            --load \
            .

          # Build client image
          docker build \
            --platform linux/arm64 \
            --file Dockerfile.client \
            --tag client-linux-arm64-image:test \
            --build-arg TARGETARCH=arm64 \
            --load \
            .

          echo "::endgroup::"

      - name: Prepare Environment
        run: |
          echo "::group::Setting up environment"

          # Set environment variables
          echo "SIGUL_SERVER_IMAGE=server-linux-arm64-image:test" >> $GITHUB_ENV
          echo "SIGUL_BRIDGE_IMAGE=bridge-linux-arm64-image:test" >> $GITHUB_ENV
          echo "SIGUL_CLIENT_IMAGE=client-linux-arm64-image:test" >> $GITHUB_ENV
          echo "NSS_PASSWORD=debug_password_$(date +%s)" >> $GITHUB_ENV
          echo "SIGUL_ADMIN_PASSWORD=debug_admin_$(date +%s)" >> $GITHUB_ENV

          # Create workspace directories
          mkdir -p crash-diagnostics
          chmod 755 crash-diagnostics

          # Make debug scripts executable
          chmod +x debug/*.sh

          echo "::endgroup::"

      - name: Start Infrastructure
        id: start_infrastructure
        run: |
          echo "::group::Starting Sigul infrastructure"

          # Start the infrastructure
          docker compose -f docker-compose.sigul.yml up -d sigul-server sigul-bridge

          # Wait longer for ARM64 emulation
          echo "Waiting for ARM64 container startup (emulated)..."
          sleep 30

          # Check initial status
          echo "Initial container status:"
          timeout 15 docker ps -a --filter "name=sigul"

          # Check for immediate failures
          SERVER_STATUS=$(docker inspect --format='{{.State.Status}}' sigul-server 2>/dev/null || echo "not_found")
          BRIDGE_STATUS=$(docker inspect --format='{{.State.Status}}' sigul-bridge 2>/dev/null || echo "not_found")

          echo "Server status: $SERVER_STATUS"
          echo "Bridge status: $BRIDGE_STATUS"

          if [[ "$SERVER_STATUS" != "running" ]] || [[ "$BRIDGE_STATUS" != "running" ]]; then
            echo "‚ùå Containers failed to start properly"
            echo "Server logs:"
            docker logs sigul-server --tail 50 || true
            echo "Bridge logs:"
            docker logs sigul-bridge --tail 50 || true
            exit 1
          fi

          echo "‚úÖ Infrastructure started successfully"
          echo "::endgroup::"

      - name: Run Crash Diagnostics
        id: crash_diagnostics
        run: |
          echo "::group::Running comprehensive crash diagnostics"

          # Determine monitor duration (shorter for ARM64 due to slower emulation)
          MONITOR_DURATION="${{ github.event.inputs.monitor_duration || '400' }}"
          DEBUG_LEVEL="${{ github.event.inputs.debug_level || 'normal' }}"

          echo "Monitor duration: ${MONITOR_DURATION} seconds (ARM64)"
          echo "Debug level: ${DEBUG_LEVEL}"

          # Set debug flags based on level
          DEBUG_FLAGS="--github-actions"
          case "$DEBUG_LEVEL" in
            "verbose"|"maximum")
              DEBUG_FLAGS="$DEBUG_FLAGS --verbose"
              ;;
          esac

          # Run the crash diagnostics capture with longer intervals for ARM64
          set +e  # Don't exit on failure - we want to capture diagnostics even if crashes occur
          ./debug/capture-crash-diagnostics.sh \
            --monitor-duration "$MONITOR_DURATION" \
            --capture-interval 5 \
            --output-dir "./crash-diagnostics" \
            $DEBUG_FLAGS

          DIAGNOSTICS_EXIT_CODE=$?
          set -e

          echo "Diagnostics exit code: $DIAGNOSTICS_EXIT_CODE"
          echo "diagnostics_exit_code=$DIAGNOSTICS_EXIT_CODE" >> $GITHUB_OUTPUT

          # Always show final container status
          echo "Final container status:"
          docker ps -a --filter "name=sigul" || true

          # Check for restart counts
          SERVER_RESTARTS=$(docker inspect --format='{{.RestartCount}}' sigul-server 2>/dev/null || echo "unknown")
          BRIDGE_RESTARTS=$(docker inspect --format='{{.RestartCount}}' sigul-bridge 2>/dev/null || echo "unknown")

          echo "Final restart counts:"
          echo "Server: $SERVER_RESTARTS"
          echo "Bridge: $BRIDGE_RESTARTS"

          echo "server_restarts=$SERVER_RESTARTS" >> $GITHUB_OUTPUT
          echo "bridge_restarts=$BRIDGE_RESTARTS" >> $GITHUB_OUTPUT

          if [[ "$DIAGNOSTICS_EXIT_CODE" -eq 0 ]]; then
            echo "‚úÖ No crashes detected during monitoring"
          else
            echo "üö® Crashes detected during monitoring"
          fi

          echo "::endgroup::"

      - name: Capture Final Logs
        if: always()
        run: |
          echo "::group::Capturing final container logs"

          # Create final logs directory
          mkdir -p crash-diagnostics/final-logs

          # Capture final logs from all containers
          for container in sigul-server sigul-bridge; do
            if timeout 10 docker ps -a --filter "name=$container" | grep -q "$container"; then
              echo "Capturing final logs for $container..."
              timeout 60 docker logs "$container" > "crash-diagnostics/final-logs/${container}_final.log" 2>&1 || echo "Failed to capture logs for $container" > "crash-diagnostics/final-logs/${container}_final.log"

              # Also capture container inspect
              timeout 15 docker inspect "$container" > "crash-diagnostics/final-logs/${container}_final_inspect.json" 2>/dev/null || echo "Failed to inspect $container" > "crash-diagnostics/final-logs/${container}_final_inspect.json"
            fi
          done

          # Capture Docker events
          timeout 30 docker events --since "1h" --until "now" --filter "container=sigul-server" --filter "container=sigul-bridge" > "crash-diagnostics/final-logs/docker_events.log" 2>/dev/null || echo "Failed to capture Docker events" > "crash-diagnostics/final-logs/docker_events.log"

          # Capture system information
          {
            echo "=== FINAL SYSTEM STATE (ARM64) ==="
            echo "Timestamp: $(date -Iseconds)"
            echo "Architecture: $(uname -m)"
            echo "Uptime: $(uptime)"
            echo "Load: $(cat /proc/loadavg)"
            echo "Memory: $(free -h)"
            echo "Disk: $(df -h)"
            echo ""
            echo "=== DOCKER SYSTEM ==="
            docker system df
            echo ""
            echo "=== FINAL CONTAINER STATUS ==="
            docker ps -a --filter "name=sigul"
          } > "crash-diagnostics/final-logs/system_state.log"

          echo "::endgroup::"

      - name: Cleanup Infrastructure
        if: always()
        run: |
          echo "::group::Cleaning up infrastructure"

          # Stop containers
          docker compose -f docker-compose.sigul.yml down --remove-orphans || true

          # Remove containers if they still exist
          docker rm -f sigul-server sigul-bridge sigul-client-test 2>/dev/null || true

          echo "Infrastructure cleanup completed"
          echo "::endgroup::"

      - name: Create Summary Report
        if: always()
        run: |
          echo "::group::Creating summary report"

          # Create a summary for GitHub Actions
          CRASH_EVENTS=$(find crash-diagnostics/crash-events -name "crash_*" -type d 2>/dev/null | wc -l || echo "0")
          SERVER_RESTARTS="${{ steps.crash_diagnostics.outputs.server_restarts || 'unknown' }}"
          BRIDGE_RESTARTS="${{ steps.crash_diagnostics.outputs.bridge_restarts || 'unknown' }}"
          DIAGNOSTICS_EXIT_CODE="${{ steps.crash_diagnostics.outputs.diagnostics_exit_code || 'unknown' }}"

          {
            echo "# üîç Sigul Bridge Crash Diagnostics Report (ARM64)"
            echo ""
            echo "**Workflow:** ${{ github.workflow }}"
            echo "**Run ID:** ${{ github.run_id }}"
            echo "**Architecture:** ARM64 (emulated)"
            echo "**Monitor Duration:** ${{ github.event.inputs.monitor_duration || '400' }} seconds"
            echo "**Debug Level:** ${{ github.event.inputs.debug_level || 'normal' }}"
            echo ""
            echo "## Results"
            echo ""
            echo "- **Crash Events Detected:** $CRASH_EVENTS"
            echo "- **Server Restarts:** $SERVER_RESTARTS"
            echo "- **Bridge Restarts:** $BRIDGE_RESTARTS"
            echo "- **Diagnostics Exit Code:** $DIAGNOSTICS_EXIT_CODE"
            echo ""

            if [[ "$CRASH_EVENTS" -gt 0 ]] || [[ "$BRIDGE_RESTARTS" != "0" ]] && [[ "$BRIDGE_RESTARTS" != "unknown" ]]; then
              echo "## ‚ö†Ô∏è Issues Detected"
              echo ""
              echo "Bridge restart/crash issues were detected during this run."
              echo "Check the uploaded diagnostics artifact for detailed analysis."
              echo ""
              if [[ "$CRASH_EVENTS" -gt 0 ]]; then
                echo "- **$CRASH_EVENTS crash events** captured with full diagnostics"
              fi
              if [[ "$BRIDGE_RESTARTS" != "0" ]] && [[ "$BRIDGE_RESTARTS" != "unknown" ]]; then
                echo "- **$BRIDGE_RESTARTS bridge restarts** detected"
              fi
              echo ""
              echo "**Note:** ARM64 testing runs under emulation which may affect timing and resource usage."
            else
              echo "## ‚úÖ No Issues Detected"
              echo ""
              echo "No crashes or restart issues were detected during the monitoring period."
              echo "The bridge daemon appears to be stable on ARM64 (emulated)."
            fi

            echo ""
            echo "## Artifacts"
            echo ""
            echo "- **crash-diagnostics-arm64:** Complete diagnostic data including logs, configurations, and crash reports"

          } >> $GITHUB_STEP_SUMMARY

          echo "::endgroup::"

      - name: Upload Crash Diagnostics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: crash-diagnostics-arm64
          path: crash-diagnostics/
          retention-days: 7
          compression-level: 6

  summary:
    if: always()
    needs: [debug-bridge-crashes-amd64, debug-bridge-crashes-arm64]
    runs-on: ubuntu-latest

    steps:
      - name: Create Overall Summary
        run: |
          echo "# üîç Sigul Bridge Crash Diagnostics - Overall Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Run:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check job results
          AMD64_RESULT="${{ needs.debug-bridge-crashes-amd64.result }}"
          ARM64_RESULT="${{ needs.debug-bridge-crashes-arm64.result }}"

          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **AMD64:** $AMD64_RESULT" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event.inputs.architecture }}" == "arm64" ]] || [[ "${{ github.event.inputs.architecture }}" == "both" ]]; then
            echo "- **ARM64:** $ARM64_RESULT" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Provide guidance based on results
          if [[ "$AMD64_RESULT" == "failure" ]] || [[ "$ARM64_RESULT" == "failure" ]]; then
            echo "## ‚ö†Ô∏è Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Crash or restart issues were detected. Download the diagnostic artifacts for analysis:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "1. Review the crash event reports in \`crash-events/\` directories" >> $GITHUB_STEP_SUMMARY
            echo "2. Analyze continuous logs for patterns leading to crashes" >> $GITHUB_STEP_SUMMARY
            echo "3. Check container configurations and environment differences" >> $GITHUB_STEP_SUMMARY
            echo "4. Compare system resource usage at crash times" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚úÖ No Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No crashes were detected during this monitoring session." >> $GITHUB_STEP_SUMMARY
            echo "This could indicate:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- The issue has been resolved" >> $GITHUB_STEP_SUMMARY
            echo "- The issue is intermittent and didn't occur during this run" >> $GITHUB_STEP_SUMMARY
            echo "- The issue requires specific conditions not present in this test" >> $GITHUB_STEP_SUMMARY
          fi
